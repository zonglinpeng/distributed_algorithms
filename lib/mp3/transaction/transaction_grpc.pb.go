// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionClient interface {
	Begin(ctx context.Context, in *BeginReq, opts ...grpc.CallOption) (*BeginRes, error)
	Deposit(ctx context.Context, in *DepositReq, opts ...grpc.CallOption) (*DepositRes, error)
	Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceRes, error)
	WithDraw(ctx context.Context, in *WithDrawReq, opts ...grpc.CallOption) (*WithDrawRes, error)
	TryCommit(ctx context.Context, in *TryCommitReq, opts ...grpc.CallOption) (*TryCommitRes, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRes, error)
	Abort(ctx context.Context, in *AbortReq, opts ...grpc.CallOption) (*AbortRes, error)
}

type transactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionClient(cc grpc.ClientConnInterface) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) Begin(ctx context.Context, in *BeginReq, opts ...grpc.CallOption) (*BeginRes, error) {
	out := new(BeginRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Deposit(ctx context.Context, in *DepositReq, opts ...grpc.CallOption) (*DepositRes, error) {
	out := new(DepositRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceRes, error) {
	out := new(BalanceRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithDraw(ctx context.Context, in *WithDrawReq, opts ...grpc.CallOption) (*WithDrawRes, error) {
	out := new(WithDrawRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/WithDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) TryCommit(ctx context.Context, in *TryCommitReq, opts ...grpc.CallOption) (*TryCommitRes, error) {
	out := new(TryCommitRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/TryCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRes, error) {
	out := new(CommitRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) Abort(ctx context.Context, in *AbortReq, opts ...grpc.CallOption) (*AbortRes, error) {
	out := new(AbortRes)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
// All implementations must embed UnimplementedTransactionServer
// for forward compatibility
type TransactionServer interface {
	Begin(context.Context, *BeginReq) (*BeginRes, error)
	Deposit(context.Context, *DepositReq) (*DepositRes, error)
	Balance(context.Context, *BalanceReq) (*BalanceRes, error)
	WithDraw(context.Context, *WithDrawReq) (*WithDrawRes, error)
	TryCommit(context.Context, *TryCommitReq) (*TryCommitRes, error)
	Commit(context.Context, *CommitReq) (*CommitRes, error)
	Abort(context.Context, *AbortReq) (*AbortRes, error)
	mustEmbedUnimplementedTransactionServer()
}

// UnimplementedTransactionServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServer struct {
}

func (UnimplementedTransactionServer) Begin(context.Context, *BeginReq) (*BeginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedTransactionServer) Deposit(context.Context, *DepositReq) (*DepositRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedTransactionServer) Balance(context.Context, *BalanceReq) (*BalanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedTransactionServer) WithDraw(context.Context, *WithDrawReq) (*WithDrawRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithDraw not implemented")
}
func (UnimplementedTransactionServer) TryCommit(context.Context, *TryCommitReq) (*TryCommitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryCommit not implemented")
}
func (UnimplementedTransactionServer) Commit(context.Context, *CommitReq) (*CommitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTransactionServer) Abort(context.Context, *AbortReq) (*AbortRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedTransactionServer) mustEmbedUnimplementedTransactionServer() {}

// UnsafeTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServer will
// result in compilation errors.
type UnsafeTransactionServer interface {
	mustEmbedUnimplementedTransactionServer()
}

func RegisterTransactionServer(s grpc.ServiceRegistrar, srv TransactionServer) {
	s.RegisterService(&Transaction_ServiceDesc, srv)
}

func _Transaction_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Begin(ctx, req.(*BeginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Deposit(ctx, req.(*DepositReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Balance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithDrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/WithDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithDraw(ctx, req.(*WithDrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_TryCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).TryCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/TryCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).TryCommit(ctx, req.(*TryCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Abort(ctx, req.(*AbortReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Transaction_ServiceDesc is the grpc.ServiceDesc for Transaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _Transaction_Begin_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Transaction_Deposit_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Transaction_Balance_Handler,
		},
		{
			MethodName: "WithDraw",
			Handler:    _Transaction_WithDraw_Handler,
		},
		{
			MethodName: "TryCommit",
			Handler:    _Transaction_TryCommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Transaction_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _Transaction_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}
